--zadanie1
CREATE OR REPLACE FUNCTION GenerujCiagFibonacciego(n INT)
RETURNS SETOF INT AS $$
DECLARE
	a INT := 0;
	b INT := 1;
	fib INT;
	i INT := 0;
BEGIN
	IF n >=0 THEN
		FOR i IN 0..n LOOP
			fib := a;
			a :=b;
			b := fib +a;
			RETURN NEXT fib;
		END LOOP;
	ELSE
		RAISE EXCEPTION 'Liczba musi byc niujemna.';
	END IF;
	RETURN;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE PROCEDURE public.fib(
	IN n integer)
LANGUAGE 'sql'
AS $BODY$
SELECT fibonacci(n);
$BODY$;



--zadanie2
CREATE OR REPLACE FUNCTION uppercase_lastname()
RETURNS TRIGGER AS $$
BEGIN
    NEW.lastname := UPPER(NEW.lastname);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER modify_lastname_trigger
BEFORE INSERT OR UPDATE ON Persons
FOR EACH ROW
WHEN (NEW.lastname IS NOT NULL)
EXECUTE FUNCTION uppercase_lastname();


--zadanie3
CREATE OR REPLACE FUNCTION check_taxrate_change()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.TaxRate > OLD.TaxRate * 1.3 OR NEW.TaxRate < OLD.TaxRate * 0.7 THEN
        RAISE EXCEPTION 'Zmiana wartości TaxRate o więcej niż 30%!';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER taxRateMonitoring
BEFORE UPDATE ON YourTableName -- ZAMIEN 'YourTableName' NA NAZWĘ TWOJEJ TABELI
FOR EACH ROW
WHEN (NEW.TaxRate IS NOT NULL AND OLD.TaxRate IS NOT NULL)
EXECUTE FUNCTION check_taxrate_change();